#!/usr/bin/env ruby

require 'pp'
require 'text-table'
require 'thread'

$stats = {}
$total = 0
files = ARGF.argv
$re = /[^[[:punct:]]]/i
$total_symbols = 0.0

#switches to modify operation
#probably switch to getopt eventually
$op = files.find_index {|x| x == "--all"}
$gstdin = files.find_index {|x| x == "--stdin"}
threaded = files.find_index {|x| x == "--threads"}
$nocase = files.find_index { |x| x == "--nocase"}
$ashex = files.find_index { |x| x == "--as-hex" }
help = files.find_index { |x| x == "--help" }
ffstdin = files.find_index {|x| x == "--files-from-stdin"}
$debug = files.find_index { |x| x == "--debug" }

#help text
def do_help
	DATA.each do |line|
		puts line
	end
end

puts "op:#{$op}\nthreads:#{threaded}\nnocase:#{$nocase}\nashex:#{$ashex}\nhelp:#{help}\nstdin:#{$gstdin}\nffstdin:#{ffstdin}" if $debug #switch values
if($gstdin && ffstdin)
	puts "please choose either --stdin or --files-from-stdin"
	exit 0
end

if($gstdin && threaded)
	puts "--threads and --stdin are mutually incompatible"
	exit 0
end
	

begin
	files.delete("--as-hex")
	files.delete("--nocase")
	files.delete("--all")
	files.delete("--files-from-stdin") 
	files.delete("--stdin")
	files.delete("--threads")
end

if($gstdin or ffstdin)
	$stdin.each_line do |name|
		#puts name
		files.push name.strip
	end
end
if(files.count <= 0)
	puts "no file(s) given"
	do_help()
	exit
end
if(help != nil)
	do_help()
	exit
end
$queue = Queue.new
started_at = Time.now

files.each { |file|
	next if (!File.file? file or File.directory? file)
	$queue.push(file)
} if !$gstdin	



def get_statistics(file)
	puts "extracting symbols from #{file}" if $debug
	contents = ""
	if($gstdin)
		contents = file
	else
		return if File.directory? file
		contents = File.read(file)
	end
	contents = contents.chars.select(&:valid_encoding?).join
	$total += contents.length
	symbols = contents.gsub($re,"")
	$total_symbols += symbols.length
	target = $op ? contents : symbols
	target = target.downcase if $nocase
	target.split(//).each { |c|
		if(c.ord <= 32 or $ashex)
			c = "0x" << ("%02X" % c.ord) 
		end
		if(!$stats.has_key?(c))
			$stats[c] = 1
		else
			$stats[c] += 1
		end
	}
end

if(threaded)
	workers = (0..10).map do 
		Thread.new do
			begin
			  while file = $queue.pop(true)
			    begin
				get_statistics(file)			
			    rescue => e
				puts e.inspect
			    end
			end
		        rescue ThreadError
		     	end
		end
	end
	workers.map(&:join)
else 	
	if($gstdin)
		get_statistics(files.join "\n")
	else 
		files.each { |file| 
			get_statistics(file)
		}
	end
end
puts "symbol count"
table = Text::Table.new
table.head = %w{symbol count percentage}
table.rows = []
divisor = $total/100.0
$stats.sort_by {|sym, cnt| cnt }.reverse.each { |sym, count|
	#puts "#{sym} #{count}"
	table.rows << [sym, count, (((count/divisor)/100)*100).round(4).to_s << '%']
}
puts table.to_s
puts "-"*50 << "\n"
puts "total characters: #{$total}"
puts "total symbols: #{$total_symbols.to_i}" if $total_symbols > 0
puts "-"*50
puts "#{($total/$total_symbols).round(2)} characters/symbol" if $total_symbols > 0
puts "#{($total_symbols/$total).round(2)} symbols/character" if $total_symbols > 0
puts "symbol percentage: " << (($total_symbols/($total/100.0)/100.0)*100).round(2).to_s << '%' if $total_symbols > 0

__END__
symbols [--all] [--stdin] [--threads] [--as-hex] 
	[--nocase] [--help] [--files-from-stdin] [--debug]
	__file1__ ... __fileN__

	flags:

	--all
	    count occurrences of ALL characters,
	    not just symbols

	--files-from-stdin
	    read file list from stdin

	--stdin
	    analyze content from stdin

	--threads
	    run program in multithreaded manner 

	--nocase
	    treat content of files as case insensitive
	    (eg file.content.downcase!)

	--as-hex
	    output content of file as hexadecimal digits
	    rather than ascii characters

	--help
		get this help screen

	--debug
		print debug info


